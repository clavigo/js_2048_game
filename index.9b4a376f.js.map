{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ], initialScore = 0){\n        // Initial state of game\n        this.initialState = structuredClone(initialState);\n        this.state = structuredClone(initialState);\n        // Initial score\n        this.score = initialScore;\n        // Initial game status\n        this.status = \"idle\";\n        // Value to win\n        this.WINNING_VALUE = 2048;\n    }\n    /**\n   * Moves all the tiles to the left and adds a random new tile.\n   */ moveLeft() {\n        let stateChanged = false;\n        this.state.forEach((row, i)=>{\n            const initialRow = [\n                ...this.state[i]\n            ];\n            this.state[i] = this.shift(row, \"left\");\n            if (!this.arraysEqual(initialRow, this.state[i])) stateChanged = true;\n        });\n        if (stateChanged) this.addRandomCell();\n    }\n    /**\n   * Moves all the tiles to the right and adds a random new tile.\n   */ moveRight() {\n        let stateChanged = false;\n        this.state.forEach((row, i)=>{\n            const initialRow = [\n                ...this.state[i]\n            ];\n            this.state[i] = this.shift(row, \"right\");\n            if (!this.arraysEqual(initialRow, this.state[i])) stateChanged = true;\n        });\n        if (stateChanged) this.addRandomCell();\n    }\n    /**\n   * Moves all the tiles upwards and adds a random new tile.\n   */ moveUp() {\n        const numColumns = this.state[0].length;\n        const numRows = this.state.length;\n        let stateChanged = false;\n        for(let col = 0; col < numColumns; col++){\n            const initialColumn = this.state.map((row)=>row[col]);\n            const column = this.state.map((row)=>row[col]);\n            const newColumn = this.shift(column, \"up\");\n            if (!this.arraysEqual(initialColumn, newColumn)) stateChanged = true;\n            for(let row = 0; row < numRows; row++)this.state[row][col] = newColumn[row];\n        }\n        if (stateChanged) this.addRandomCell();\n    }\n    /**\n   * Moves all the tiles downwards and adds a random new tile.\n   */ moveDown() {\n        const numColumns = this.state[0].length;\n        const numRows = this.state.length;\n        let stateChanged = false;\n        for(let col = 0; col < numColumns; col++){\n            const initialColumn = this.state.map((row)=>row[col]);\n            const column = this.state.map((row)=>row[col]);\n            const newColumn = this.shift(column, \"down\");\n            if (!this.arraysEqual(initialColumn, newColumn)) stateChanged = true;\n            for(let row = 0; row < numRows; row++)this.state[row][col] = newColumn[row];\n        }\n        if (stateChanged) this.addRandomCell();\n    }\n    /**\n   * Method for comparing two arrays (to check for state changes)\n   */ arraysEqual(arr1, arr2) {\n        if (arr1.length !== arr2.length) return false;\n        for(let i = 0; i < arr1.length; i++){\n            if (arr1[i] !== arr2[i]) return false;\n        }\n        return true;\n    }\n    /**\n   * Returns current game score\n   *\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * Returns current game state\n   *\n   * @returns {number[][]}\n   */ getState() {\n        return structuredClone(this.state);\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game by adding two random tiles\n   * and setting the status to 'playing'.\n   */ start() {\n        this.addRandomCell();\n        this.addRandomCell();\n        this.getState();\n        this.status = \"playing\";\n    }\n    /**\n   * Resets the game to its initial state.\n   */ restart() {\n        this.state = JSON.parse(JSON.stringify(this.initialState));\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    /**\n   * Adds a random tile (either 2 or 4) to an empty cell.\n   * This tile is placed in a random empty position on the board.\n   */ addRandomCell() {\n        const emptyCells = [];\n        // Find all empty cells on the board.\n        for(let row = 0; row < this.state.length; row++){\n            for(let col = 0; col < this.state[row].length; col++)if (this.state[row][col] === 0) emptyCells.push([\n                row,\n                col\n            ]);\n        }\n        // If there are no empty cells, return.\n        if (emptyCells.length === 0) return;\n        // Choose a random empty cell and place a 2 or 4.\n        const [rowRand, cellRand] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.state[rowRand][cellRand] = Math.random() < 0.1 ? 4 : 2;\n        this.updateHtmlCells();\n    }\n    /**\n   * Gets the game cells from the DOM.\n   *\n   * @returns {number[][]} A 2D array of HTML cell elements.\n   */ getCells() {\n        if (!this.cachedCells) {\n            const rows = document.querySelectorAll(\".field-row\");\n            // Cache the cell elements if they haven't been cached yet.\n            this.cachedCells = Array.from(rows).map((row)=>{\n                return Array.from(row.querySelectorAll(\".field-cell\"));\n            });\n        }\n        return this.cachedCells;\n    }\n    /**\n   * Update HTML according to the game state\n   */ updateHtmlCells() {\n        const htmlCells = this.getCells();\n        const state = this.getState();\n        state.forEach((row, i)=>{\n            row.forEach((value, j)=>{\n                const cell = htmlCells[i][j];\n                // Set the cell's text content and class name based on the value.\n                cell.textContent = value || \"\";\n                cell.className = cell.className.split(\" \").filter((className)=>!className.startsWith(\"field-cell--\")).join(\" \");\n                if (value !== 0) cell.classList.add(`field-cell--${value}`);\n            });\n        });\n    }\n    /**\n   * Shifts the tiles in a given direction,\n   * merging adjacent tiles with equal values.\n   * Also updates the score.\n   *\n   * @param {number[]} array - The array of tiles to shift.\n   * @param {string} direction - The direction to shift the tiles\n   * ('left', 'right', 'up', 'down').\n   * @returns {number[]} The new array after shifting and merging.\n   */ shift(array, direction) {\n        const nonZero = array.filter((num)=>num !== 0);\n        const newArray = [];\n        let scoreIncrement = 0;\n        // Loop through the non-zero tiles and merge if adjacent tiles are equal.\n        for(let i = 0; i < nonZero.length; i++)if (nonZero[i] === nonZero[i + 1]) {\n            const mergedValue = nonZero[i] * 2;\n            newArray.push(mergedValue);\n            scoreIncrement += mergedValue;\n            i++;\n        } else newArray.push(nonZero[i]);\n        // Fill the remaining spaces with zeros based on the direction of movement.\n        const zeros = new Array(array.length - newArray.length).fill(0);\n        const result = direction === \"left\" || direction === \"up\" ? newArray.concat(zeros) : zeros.concat(newArray);\n        this.score += scoreIncrement;\n        // Check if the game is over or won after the move.\n        this.isGameOver();\n        this.isGameWin();\n        return result;\n    }\n    /**\n   * Checks if the game is over.\n   * Sets the game status to 'lose' if the game is over.\n   */ isGameOver() {\n        for (const row of this.state){\n            if (row.includes(0)) return;\n        }\n        const numRows = this.state.length;\n        const numColumns = this.state[0].length;\n        for(let row = 0; row < numRows; row++)for(let col = 0; col < numColumns; col++){\n            const current = this.state[row][col];\n            if (col < numColumns - 1 && current === this.state[row][col + 1] || row < numRows - 1 && current === this.state[row + 1][col]) return;\n        }\n        this.status = \"lose\";\n    }\n    /**\n   * Checks if the player has won the game.\n   * Sets the game status to 'win' if the player has won.\n   */ isGameWin() {\n        const state = this.getState();\n        state.forEach((row)=>{\n            if (row.includes(this.WINNING_VALUE)) this.status = \"win\";\n        });\n    }\n    createTile(value, element) {\n        return {\n            value: value,\n            element: element\n        };\n    }\n    setValue(tile, value) {\n        tile.value = value;\n        tile.element.textContent = value === 0 ? \"\" : value;\n        tile.element.className = tile.element.className.split(\" \").filter((className)=>!className.startsWith(\"field-cell--\")).join(\" \");\n        if (value !== 0) tile.element.classList.add(`field-cell--${value}`);\n    }\n    setPosition(tile, x, y) {\n        tile.element.style.transition = \"transform 0.2s ease\";\n        tile.element.style.transform = `translate(${x * 100}px, ${y * 100}px)`; // assuming each cell is 100px by 100px\n    }\n    animateTileAppear(tile) {\n        tile.element.classList.add(\"tile-appear\");\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n/**\n * Initializes the game by adding event listener to the start button.\n */ const $09e991522ca7e64e$var$startGame = ()=>{\n    const startButton = document.querySelector(\".start\");\n    startButton.addEventListener(\"click\", ()=>{\n        $09e991522ca7e64e$var$game.start();\n        const messageStart = document.querySelector(\".message-start\");\n        const restartButton = document.querySelector(\".restart\");\n        if (messageStart) messageStart.classList.add(\"hidden\");\n        if (restartButton) restartButton.classList.remove(\"hidden\");\n        startButton.classList.add(\"hidden\");\n    });\n};\n/**\n * Restarts the game by adding event listener to the restart button.\n */ const $09e991522ca7e64e$var$restartGame = ()=>{\n    const restartButton = document.querySelector(\".restart\");\n    restartButton.addEventListener(\"click\", ()=>{\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$game.updateHtmlCells();\n        $09e991522ca7e64e$var$score();\n        const messageStart = document.querySelector(\".message-start\");\n        const startButton = document.querySelector(\".start\");\n        const messageLose = document.querySelector(\".message-lose\");\n        const messageWin = document.querySelector(\".message-win\");\n        if (messageStart) messageStart.classList.remove(\"hidden\");\n        if (startButton) startButton.classList.remove(\"hidden\");\n        if (restartButton) restartButton.classList.add(\"hidden\");\n        if (messageLose) messageLose.classList.add(\"hidden\");\n        if (messageWin) messageWin.classList.add(\"hidden\");\n    });\n};\n/**\n * Listens for keydown events.\n * Moves the tiles according to the arrow key pressed.\n * Updates the game state and score after each move.\n */ const $09e991522ca7e64e$var$move = ()=>{\n    document.addEventListener(\"keydown\", (e)=>{\n        if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n            switch(e.key){\n                case \"ArrowLeft\":\n                    $09e991522ca7e64e$var$game.moveLeft();\n                    break;\n                case \"ArrowRight\":\n                    $09e991522ca7e64e$var$game.moveRight();\n                    break;\n                case \"ArrowUp\":\n                    $09e991522ca7e64e$var$game.moveUp();\n                    break;\n                case \"ArrowDown\":\n                    $09e991522ca7e64e$var$game.moveDown();\n                    break;\n                default:\n                    return;\n            }\n            $09e991522ca7e64e$var$game.updateHtmlCells();\n            $09e991522ca7e64e$var$score();\n            $09e991522ca7e64e$var$loseOrWin();\n        }\n    });\n};\n/**\n * Updates the score display on the webpage.\n */ const $09e991522ca7e64e$var$score = ()=>{\n    const scoreCount = document.querySelector(\".game-score\");\n    scoreCount.textContent = $09e991522ca7e64e$var$game.getScore();\n};\n/**\n * Listens for keydown events and displays the appropriate win or lose message.\n */ const $09e991522ca7e64e$var$loseOrWin = ()=>{\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (gameStatus === \"lose\") document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n    else if (gameStatus === \"win\") document.querySelector(\".message-win\").classList.remove(\"hidden\");\n};\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    $09e991522ca7e64e$var$startGame();\n    $09e991522ca7e64e$var$restartGame();\n    $09e991522ca7e64e$var$move();\n});\n\n\n//# sourceMappingURL=index.9b4a376f.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n/**\n * Initializes the game by adding event listener to the start button.\n */\nconst startGame = () => {\n  const startButton = document.querySelector('.start');\n\n  startButton.addEventListener('click', () => {\n    game.start();\n\n    const messageStart = document.querySelector('.message-start');\n    const restartButton = document.querySelector('.restart');\n\n    if (messageStart) {\n      messageStart.classList.add('hidden');\n    }\n\n    if (restartButton) {\n      restartButton.classList.remove('hidden');\n    }\n\n    startButton.classList.add('hidden');\n  });\n};\n\n/**\n * Restarts the game by adding event listener to the restart button.\n */\nconst restartGame = () => {\n  const restartButton = document.querySelector('.restart');\n\n  restartButton.addEventListener('click', () => {\n    game.restart();\n    game.updateHtmlCells();\n    score();\n\n    const messageStart = document.querySelector('.message-start');\n    const startButton = document.querySelector('.start');\n    const messageLose = document.querySelector('.message-lose');\n    const messageWin = document.querySelector('.message-win');\n\n    if (messageStart) {\n      messageStart.classList.remove('hidden');\n    }\n\n    if (startButton) {\n      startButton.classList.remove('hidden');\n    }\n\n    if (restartButton) {\n      restartButton.classList.add('hidden');\n    }\n\n    if (messageLose) {\n      messageLose.classList.add('hidden');\n    }\n\n    if (messageWin) {\n      messageWin.classList.add('hidden');\n    }\n  });\n};\n\n/**\n * Listens for keydown events.\n * Moves the tiles according to the arrow key pressed.\n * Updates the game state and score after each move.\n */\nconst move = () => {\n  document.addEventListener('keydown', (e) => {\n    if (game.getStatus() === 'playing') {\n      switch (e.key) {\n        case 'ArrowLeft':\n          game.moveLeft();\n          break;\n\n        case 'ArrowRight':\n          game.moveRight();\n          break;\n\n        case 'ArrowUp':\n          game.moveUp();\n          break;\n\n        case 'ArrowDown':\n          game.moveDown();\n          break;\n\n        default:\n          return;\n      }\n\n      game.updateHtmlCells();\n      score();\n      loseOrWin();\n    }\n  });\n};\n\n/**\n * Updates the score display on the webpage.\n */\nconst score = () => {\n  const scoreCount = document.querySelector('.game-score');\n\n  scoreCount.textContent = game.getScore();\n};\n\n/**\n * Listens for keydown events and displays the appropriate win or lose message.\n */\nconst loseOrWin = () => {\n  const gameStatus = game.getStatus();\n\n  if (gameStatus === 'lose') {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  } else if (gameStatus === 'win') {\n    document.querySelector('.message-win').classList.remove('hidden');\n  }\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  startGame();\n  restartGame();\n  move();\n});\n","'use strict';\n\n/**\n * This class represents the game.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    initialScore = 0,\n  ) {\n    // Initial state of game\n    this.initialState = structuredClone(initialState);\n    this.state = structuredClone(initialState);\n\n    // Initial score\n    this.score = initialScore;\n\n    // Initial game status\n    this.status = 'idle';\n\n    // Value to win\n    this.WINNING_VALUE = 2048;\n  }\n\n  /**\n   * Moves all the tiles to the left and adds a random new tile.\n   */\n  moveLeft() {\n    let stateChanged = false;\n\n    this.state.forEach((row, i) => {\n      const initialRow = [...this.state[i]];\n\n      this.state[i] = this.shift(row, 'left');\n\n      if (!this.arraysEqual(initialRow, this.state[i])) {\n        stateChanged = true;\n      }\n    });\n\n    if (stateChanged) {\n      this.addRandomCell();\n    }\n  }\n\n  /**\n   * Moves all the tiles to the right and adds a random new tile.\n   */\n  moveRight() {\n    let stateChanged = false;\n\n    this.state.forEach((row, i) => {\n      const initialRow = [...this.state[i]];\n\n      this.state[i] = this.shift(row, 'right');\n\n      if (!this.arraysEqual(initialRow, this.state[i])) {\n        stateChanged = true;\n      }\n    });\n\n    if (stateChanged) {\n      this.addRandomCell();\n    }\n  }\n\n  /**\n   * Moves all the tiles upwards and adds a random new tile.\n   */\n  moveUp() {\n    const numColumns = this.state[0].length;\n    const numRows = this.state.length;\n\n    let stateChanged = false;\n\n    for (let col = 0; col < numColumns; col++) {\n      const initialColumn = this.state.map((row) => row[col]);\n      const column = this.state.map((row) => row[col]);\n      const newColumn = this.shift(column, 'up');\n\n      if (!this.arraysEqual(initialColumn, newColumn)) {\n        stateChanged = true;\n      }\n\n      for (let row = 0; row < numRows; row++) {\n        this.state[row][col] = newColumn[row];\n      }\n    }\n\n    if (stateChanged) {\n      this.addRandomCell();\n    }\n  }\n\n  /**\n   * Moves all the tiles downwards and adds a random new tile.\n   */\n  moveDown() {\n    const numColumns = this.state[0].length;\n    const numRows = this.state.length;\n\n    let stateChanged = false;\n\n    for (let col = 0; col < numColumns; col++) {\n      const initialColumn = this.state.map((row) => row[col]);\n      const column = this.state.map((row) => row[col]);\n      const newColumn = this.shift(column, 'down');\n\n      if (!this.arraysEqual(initialColumn, newColumn)) {\n        stateChanged = true;\n      }\n\n      for (let row = 0; row < numRows; row++) {\n        this.state[row][col] = newColumn[row];\n      }\n    }\n\n    if (stateChanged) {\n      this.addRandomCell();\n    }\n  }\n\n  /**\n   * Method for comparing two arrays (to check for state changes)\n   */\n  arraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns current game score\n   *\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * Returns current game state\n   *\n   * @returns {number[][]}\n   */\n  getState() {\n    return structuredClone(this.state);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game by adding two random tiles\n   * and setting the status to 'playing'.\n   */\n  start() {\n    this.addRandomCell();\n    this.addRandomCell();\n    this.getState();\n    this.status = 'playing';\n  }\n\n  /**\n   * Resets the game to its initial state.\n   */\n  restart() {\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  /**\n   * Adds a random tile (either 2 or 4) to an empty cell.\n   * This tile is placed in a random empty position on the board.\n   */\n  addRandomCell() {\n    const emptyCells = [];\n\n    // Find all empty cells on the board.\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 0; col < this.state[row].length; col++) {\n        if (this.state[row][col] === 0) {\n          emptyCells.push([row, col]);\n        }\n      }\n    }\n\n    // If there are no empty cells, return.\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    // Choose a random empty cell and place a 2 or 4.\n    const [rowRand, cellRand] =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.state[rowRand][cellRand] = Math.random() < 0.1 ? 4 : 2;\n\n    this.updateHtmlCells();\n  }\n\n  /**\n   * Gets the game cells from the DOM.\n   *\n   * @returns {number[][]} A 2D array of HTML cell elements.\n   */\n  getCells() {\n    if (!this.cachedCells) {\n      const rows = document.querySelectorAll('.field-row');\n\n      // Cache the cell elements if they haven't been cached yet.\n      this.cachedCells = Array.from(rows).map((row) => {\n        return Array.from(row.querySelectorAll('.field-cell'));\n      });\n    }\n\n    return this.cachedCells;\n  }\n\n  /**\n   * Update HTML according to the game state\n   */\n  updateHtmlCells() {\n    const htmlCells = this.getCells();\n    const state = this.getState();\n\n    state.forEach((row, i) => {\n      row.forEach((value, j) => {\n        const cell = htmlCells[i][j];\n\n        // Set the cell's text content and class name based on the value.\n        cell.textContent = value || '';\n\n        cell.className = cell.className\n          .split(' ')\n          .filter((className) => !className.startsWith('field-cell--'))\n          .join(' ');\n\n        if (value !== 0) {\n          cell.classList.add(`field-cell--${value}`);\n        }\n      });\n    });\n  }\n\n  /**\n   * Shifts the tiles in a given direction,\n   * merging adjacent tiles with equal values.\n   * Also updates the score.\n   *\n   * @param {number[]} array - The array of tiles to shift.\n   * @param {string} direction - The direction to shift the tiles\n   * ('left', 'right', 'up', 'down').\n   * @returns {number[]} The new array after shifting and merging.\n   */\n  shift(array, direction) {\n    const nonZero = array.filter((num) => num !== 0);\n    const newArray = [];\n    let scoreIncrement = 0;\n\n    // Loop through the non-zero tiles and merge if adjacent tiles are equal.\n    for (let i = 0; i < nonZero.length; i++) {\n      if (nonZero[i] === nonZero[i + 1]) {\n        const mergedValue = nonZero[i] * 2;\n\n        newArray.push(mergedValue);\n        scoreIncrement += mergedValue;\n        i++;\n      } else {\n        newArray.push(nonZero[i]);\n      }\n    }\n\n    // Fill the remaining spaces with zeros based on the direction of movement.\n    const zeros = new Array(array.length - newArray.length).fill(0);\n    const result =\n      direction === 'left' || direction === 'up'\n        ? newArray.concat(zeros)\n        : zeros.concat(newArray);\n\n    this.score += scoreIncrement;\n\n    // Check if the game is over or won after the move.\n    this.isGameOver();\n    this.isGameWin();\n\n    return result;\n  }\n\n  /**\n   * Checks if the game is over.\n   * Sets the game status to 'lose' if the game is over.\n   */\n  isGameOver() {\n    for (const row of this.state) {\n      if (row.includes(0)) {\n        return;\n      }\n    }\n\n    const numRows = this.state.length;\n    const numColumns = this.state[0].length;\n\n    for (let row = 0; row < numRows; row++) {\n      for (let col = 0; col < numColumns; col++) {\n        const current = this.state[row][col];\n\n        if (\n          (col < numColumns - 1 && current === this.state[row][col + 1]) ||\n          (row < numRows - 1 && current === this.state[row + 1][col])\n        ) {\n          return;\n        }\n      }\n    }\n\n    this.status = 'lose';\n  }\n\n  /**\n   * Checks if the player has won the game.\n   * Sets the game status to 'win' if the player has won.\n   */\n  isGameWin() {\n    const state = this.getState();\n\n    state.forEach((row) => {\n      if (row.includes(this.WINNING_VALUE)) {\n        this.status = 'win';\n      }\n    });\n  }\n\n  createTile(value, element) {\n    return {\n      value: value,\n      element: element,\n    };\n  }\n\n  setValue(tile, value) {\n    tile.value = value;\n    tile.element.textContent = value === 0 ? '' : value;\n\n    tile.element.className = tile.element.className\n      .split(' ')\n      .filter((className) => !className.startsWith('field-cell--'))\n      .join(' ');\n\n    if (value !== 0) {\n      tile.element.classList.add(`field-cell--${value}`);\n    }\n  }\n\n  setPosition(tile, x, y) {\n    tile.element.style.transition = 'transform 0.2s ease';\n    tile.element.style.transform = `translate(${x * 100}px, ${y * 100}px)`; // assuming each cell is 100px by 100px\n  }\n\n  animateTileAppear(tile) {\n    tile.element.classList.add('tile-appear');\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","initialScore","structuredClone","state","score","status","WINNING_VALUE","moveLeft","stateChanged","forEach","row","i","initialRow","shift","arraysEqual","addRandomCell","moveRight","moveUp","numColumns","length","numRows","col","initialColumn","map","column","newColumn","moveDown","arr1","arr2","getScore","getState","getStatus","start","restart","JSON","parse","stringify","emptyCells","push","rowRand","cellRand","Math","floor","random","updateHtmlCells","getCells","cachedCells","rows","document","querySelectorAll","Array","from","htmlCells","value","j","cell","textContent","className","split","filter","startsWith","join","classList","add","array","direction","nonZero","num","newArray","scoreIncrement","mergedValue","zeros","fill","result","concat","isGameOver","isGameWin","includes","current","createTile","element","setValue","tile","setPosition","x","y","style","transition","transform","animateTileAppear","$09e991522ca7e64e$var$startGame","startButton","querySelector","addEventListener","messageStart","restartButton","remove","$09e991522ca7e64e$var$restartGame","$09e991522ca7e64e$var$score","messageLose","messageWin","$09e991522ca7e64e$var$move","e","key","$09e991522ca7e64e$var$loseOrWin","scoreCount","gameStatus"],"version":3,"file":"index.9b4a376f.js.map"}