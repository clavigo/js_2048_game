{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $09cbfe85151ea6c6$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$71511d61b312f219(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $efec029548ccee7f$export$71511d61b312f219(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$71511d61b312f219)(arr) || (0, $8ca2848f896a6803$export$71511d61b312f219)(arr, i) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr, i) || (0, $a0bc1859061deae1$export$71511d61b312f219)();\n}\n\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ], initialScore = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        // Initial state of game\n        this.initialState = structuredClone(initialState);\n        this.state = structuredClone(initialState);\n        // Initial score\n        this.score = initialScore;\n        // Initial game status\n        this.status = \"idle\";\n        // Value to win\n        this.WINNING_VALUE = 2048;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            /**\n   * Moves all the tiles to the left and adds a random new tile.\n   */ key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this;\n                var stateChanged = false;\n                this.state.forEach(function(row, i) {\n                    var initialRow = (0, $227c6742e0ff6f82$export$71511d61b312f219)(_this.state[i]);\n                    _this.state[i] = _this.shift(row, \"left\");\n                    if (!_this.arraysEqual(initialRow, _this.state[i])) stateChanged = true;\n                });\n                if (stateChanged) this.addRandomCell();\n            }\n        },\n        {\n            /**\n   * Moves all the tiles to the right and adds a random new tile.\n   */ key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this;\n                var stateChanged = false;\n                this.state.forEach(function(row, i) {\n                    var initialRow = (0, $227c6742e0ff6f82$export$71511d61b312f219)(_this.state[i]);\n                    _this.state[i] = _this.shift(row, \"right\");\n                    if (!_this.arraysEqual(initialRow, _this.state[i])) stateChanged = true;\n                });\n                if (stateChanged) this.addRandomCell();\n            }\n        },\n        {\n            /**\n   * Moves all the tiles upwards and adds a random new tile.\n   */ key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this, _loop = function(col) {\n                    var initialColumn = _this.state.map(function(row) {\n                        return row[col];\n                    });\n                    var column = _this.state.map(function(row) {\n                        return row[col];\n                    });\n                    var newColumn = _this.shift(column, \"up\");\n                    if (!_this.arraysEqual(initialColumn, newColumn)) stateChanged = true;\n                    for(var row = 0; row < numRows; row++)_this.state[row][col] = newColumn[row];\n                };\n                var numColumns = this.state[0].length;\n                var numRows = this.state.length;\n                var stateChanged = false;\n                for(var col = 0; col < numColumns; col++)_loop(col);\n                if (stateChanged) this.addRandomCell();\n            }\n        },\n        {\n            /**\n   * Moves all the tiles downwards and adds a random new tile.\n   */ key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this, _loop = function(col) {\n                    var initialColumn = _this.state.map(function(row) {\n                        return row[col];\n                    });\n                    var column = _this.state.map(function(row) {\n                        return row[col];\n                    });\n                    var newColumn = _this.shift(column, \"down\");\n                    if (!_this.arraysEqual(initialColumn, newColumn)) stateChanged = true;\n                    for(var row = 0; row < numRows; row++)_this.state[row][col] = newColumn[row];\n                };\n                var numColumns = this.state[0].length;\n                var numRows = this.state.length;\n                var stateChanged = false;\n                for(var col = 0; col < numColumns; col++)_loop(col);\n                if (stateChanged) this.addRandomCell();\n            }\n        },\n        {\n            /**\n   * Method for comparing two arrays (to check for state changes)\n   */ key: \"arraysEqual\",\n            value: function arraysEqual(arr1, arr2) {\n                if (arr1.length !== arr2.length) return false;\n                for(var i = 0; i < arr1.length; i++){\n                    if (arr1[i] !== arr2[i]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            /**\n   * Returns current game score\n   *\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * Returns current game state\n   *\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return structuredClone(this.state);\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game by adding two random tiles\n   * and setting the status to 'playing'.\n   */ key: \"start\",\n            value: function start() {\n                this.addRandomCell();\n                this.addRandomCell();\n                this.getState();\n                this.status = \"playing\";\n            }\n        },\n        {\n            /**\n   * Resets the game to its initial state.\n   */ key: \"restart\",\n            value: function restart() {\n                this.state = JSON.parse(JSON.stringify(this.initialState));\n                this.score = 0;\n                this.status = \"idle\";\n            }\n        },\n        {\n            /**\n   * Adds a random tile (either 2 or 4) to an empty cell.\n   * This tile is placed in a random empty position on the board.\n   */ key: \"addRandomCell\",\n            value: function addRandomCell() {\n                var emptyCells = [];\n                // Find all empty cells on the board.\n                for(var row = 0; row < this.state.length; row++){\n                    for(var col = 0; col < this.state[row].length; col++)if (this.state[row][col] === 0) emptyCells.push([\n                        row,\n                        col\n                    ]);\n                }\n                // If there are no empty cells, return.\n                if (emptyCells.length === 0) return;\n                // Choose a random empty cell and place a 2 or 4.\n                var _emptyCells_Math_floor = (0, $efec029548ccee7f$export$71511d61b312f219)(emptyCells[Math.floor(Math.random() * emptyCells.length)], 2), rowRand = _emptyCells_Math_floor[0], cellRand = _emptyCells_Math_floor[1];\n                this.state[rowRand][cellRand] = Math.random() < 0.1 ? 4 : 2;\n                this.updateHtmlCells();\n            }\n        },\n        {\n            /**\n   * Gets the game cells from the DOM.\n   *\n   * @returns {number[][]} A 2D array of HTML cell elements.\n   */ key: \"getCells\",\n            value: function getCells() {\n                if (!this.cachedCells) {\n                    var rows = document.querySelectorAll(\".field-row\");\n                    // Cache the cell elements if they haven't been cached yet.\n                    this.cachedCells = Array.from(rows).map(function(row) {\n                        return Array.from(row.querySelectorAll(\".field-cell\"));\n                    });\n                }\n                return this.cachedCells;\n            }\n        },\n        {\n            /**\n   * Update HTML according to the game state\n   */ key: \"updateHtmlCells\",\n            value: function updateHtmlCells() {\n                var htmlCells = this.getCells();\n                var state = this.getState();\n                state.forEach(function(row, i) {\n                    row.forEach(function(value, j) {\n                        var cell = htmlCells[i][j];\n                        // Set the cell's text content and class name based on the value.\n                        cell.textContent = value || \"\";\n                        cell.className = cell.className.split(\" \").filter(function(className) {\n                            return !className.startsWith(\"field-cell--\");\n                        }).join(\" \");\n                        if (value !== 0) cell.classList.add(\"field-cell--\".concat(value));\n                    });\n                });\n            }\n        },\n        {\n            /**\n   * Shifts the tiles in a given direction,\n   * merging adjacent tiles with equal values.\n   * Also updates the score.\n   *\n   * @param {number[]} array - The array of tiles to shift.\n   * @param {string} direction - The direction to shift the tiles\n   * ('left', 'right', 'up', 'down').\n   * @returns {number[]} The new array after shifting and merging.\n   */ key: \"shift\",\n            value: function shift(array, direction) {\n                var nonZero = array.filter(function(num) {\n                    return num !== 0;\n                });\n                var newArray = [];\n                var scoreIncrement = 0;\n                // Loop through the non-zero tiles and merge if adjacent tiles are equal.\n                for(var i = 0; i < nonZero.length; i++)if (nonZero[i] === nonZero[i + 1]) {\n                    var mergedValue = nonZero[i] * 2;\n                    newArray.push(mergedValue);\n                    scoreIncrement += mergedValue;\n                    i++;\n                } else newArray.push(nonZero[i]);\n                // Fill the remaining spaces with zeros based on the direction of movement.\n                var zeros = new Array(array.length - newArray.length).fill(0);\n                var result = direction === \"left\" || direction === \"up\" ? newArray.concat(zeros) : zeros.concat(newArray);\n                this.score += scoreIncrement;\n                // Check if the game is over or won after the move.\n                this.isGameOver();\n                this.isGameWin();\n                return result;\n            }\n        },\n        {\n            /**\n   * Checks if the game is over.\n   * Sets the game status to 'lose' if the game is over.\n   */ key: \"isGameOver\",\n            value: function isGameOver() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        if (row.includes(0)) return;\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                var numRows = this.state.length;\n                var numColumns = this.state[0].length;\n                for(var row1 = 0; row1 < numRows; row1++)for(var col = 0; col < numColumns; col++){\n                    var current = this.state[row1][col];\n                    if (col < numColumns - 1 && current === this.state[row1][col + 1] || row1 < numRows - 1 && current === this.state[row1 + 1][col]) return;\n                }\n                this.status = \"lose\";\n            }\n        },\n        {\n            /**\n   * Checks if the player has won the game.\n   * Sets the game status to 'win' if the player has won.\n   */ key: \"isGameWin\",\n            value: function isGameWin() {\n                var _this = this;\n                var state = this.getState();\n                state.forEach(function(row) {\n                    if (row.includes(_this.WINNING_VALUE)) _this.status = \"win\";\n                });\n            }\n        },\n        {\n            key: \"createTile\",\n            value: function createTile(value, element) {\n                return {\n                    value: value,\n                    element: element\n                };\n            }\n        },\n        {\n            key: \"setValue\",\n            value: function setValue(tile, value) {\n                tile.value = value;\n                tile.element.textContent = value === 0 ? \"\" : value;\n                tile.element.className = tile.element.className.split(\" \").filter(function(className) {\n                    return !className.startsWith(\"field-cell--\");\n                }).join(\" \");\n                if (value !== 0) tile.element.classList.add(\"field-cell--\".concat(value));\n            }\n        },\n        {\n            key: \"setPosition\",\n            value: function setPosition(tile, x, y) {\n                tile.element.style.transition = \"transform 0.2s ease\";\n                tile.element.style.transform = \"translate(\".concat(x * 100, \"px, \").concat(y * 100, \"px)\"); // assuming each cell is 100px by 100px\n            }\n        },\n        {\n            key: \"animateTileAppear\",\n            value: function animateTileAppear(tile) {\n                tile.element.classList.add(\"tile-appear\");\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n/**\n * Initializes the game by adding event listener to the start button.\n */ var $197cd56b15c33885$var$startGame = function() {\n    var startButton = document.querySelector(\".start\");\n    startButton.addEventListener(\"click\", function() {\n        $197cd56b15c33885$var$game.start();\n        var messageStart = document.querySelector(\".message-start\");\n        var restartButton = document.querySelector(\".restart\");\n        if (messageStart) messageStart.classList.add(\"hidden\");\n        if (restartButton) restartButton.classList.remove(\"hidden\");\n        startButton.classList.add(\"hidden\");\n    });\n};\n/**\n * Restarts the game by adding event listener to the restart button.\n */ var $197cd56b15c33885$var$restartGame = function() {\n    var restartButton = document.querySelector(\".restart\");\n    restartButton.addEventListener(\"click\", function() {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$game.updateHtmlCells();\n        $197cd56b15c33885$var$score();\n        var messageStart = document.querySelector(\".message-start\");\n        var startButton = document.querySelector(\".start\");\n        var messageLose = document.querySelector(\".message-lose\");\n        var messageWin = document.querySelector(\".message-win\");\n        if (messageStart) messageStart.classList.remove(\"hidden\");\n        if (startButton) startButton.classList.remove(\"hidden\");\n        if (restartButton) restartButton.classList.add(\"hidden\");\n        if (messageLose) messageLose.classList.add(\"hidden\");\n        if (messageWin) messageWin.classList.add(\"hidden\");\n    });\n};\n/**\n * Listens for keydown events.\n * Moves the tiles according to the arrow key pressed.\n * Updates the game state and score after each move.\n */ var $197cd56b15c33885$var$move = function() {\n    document.addEventListener(\"keydown\", function(e) {\n        if ($197cd56b15c33885$var$game.getStatus() === \"playing\") {\n            switch(e.key){\n                case \"ArrowLeft\":\n                    $197cd56b15c33885$var$game.moveLeft();\n                    break;\n                case \"ArrowRight\":\n                    $197cd56b15c33885$var$game.moveRight();\n                    break;\n                case \"ArrowUp\":\n                    $197cd56b15c33885$var$game.moveUp();\n                    break;\n                case \"ArrowDown\":\n                    $197cd56b15c33885$var$game.moveDown();\n                    break;\n                default:\n                    return;\n            }\n            $197cd56b15c33885$var$game.updateHtmlCells();\n            $197cd56b15c33885$var$score();\n            $197cd56b15c33885$var$loseOrWin();\n        }\n    });\n};\n/**\n * Updates the score display on the webpage.\n */ var $197cd56b15c33885$var$score = function() {\n    var scoreCount = document.querySelector(\".game-score\");\n    scoreCount.textContent = $197cd56b15c33885$var$game.getScore();\n};\n/**\n * Listens for keydown events and displays the appropriate win or lose message.\n */ var $197cd56b15c33885$var$loseOrWin = function() {\n    var gameStatus = $197cd56b15c33885$var$game.getStatus();\n    if (gameStatus === \"lose\") document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n    else if (gameStatus === \"win\") document.querySelector(\".message-win\").classList.remove(\"hidden\");\n};\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    $197cd56b15c33885$var$startGame();\n    $197cd56b15c33885$var$restartGame();\n    $197cd56b15c33885$var$move();\n});\n\n})();\n//# sourceMappingURL=index.973d3e6c.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n/**\n * Initializes the game by adding event listener to the start button.\n */\nconst startGame = () => {\n  const startButton = document.querySelector('.start');\n\n  startButton.addEventListener('click', () => {\n    game.start();\n\n    const messageStart = document.querySelector('.message-start');\n    const restartButton = document.querySelector('.restart');\n\n    if (messageStart) {\n      messageStart.classList.add('hidden');\n    }\n\n    if (restartButton) {\n      restartButton.classList.remove('hidden');\n    }\n\n    startButton.classList.add('hidden');\n  });\n};\n\n/**\n * Restarts the game by adding event listener to the restart button.\n */\nconst restartGame = () => {\n  const restartButton = document.querySelector('.restart');\n\n  restartButton.addEventListener('click', () => {\n    game.restart();\n    game.updateHtmlCells();\n    score();\n\n    const messageStart = document.querySelector('.message-start');\n    const startButton = document.querySelector('.start');\n    const messageLose = document.querySelector('.message-lose');\n    const messageWin = document.querySelector('.message-win');\n\n    if (messageStart) {\n      messageStart.classList.remove('hidden');\n    }\n\n    if (startButton) {\n      startButton.classList.remove('hidden');\n    }\n\n    if (restartButton) {\n      restartButton.classList.add('hidden');\n    }\n\n    if (messageLose) {\n      messageLose.classList.add('hidden');\n    }\n\n    if (messageWin) {\n      messageWin.classList.add('hidden');\n    }\n  });\n};\n\n/**\n * Listens for keydown events.\n * Moves the tiles according to the arrow key pressed.\n * Updates the game state and score after each move.\n */\nconst move = () => {\n  document.addEventListener('keydown', (e) => {\n    if (game.getStatus() === 'playing') {\n      switch (e.key) {\n        case 'ArrowLeft':\n          game.moveLeft();\n          break;\n\n        case 'ArrowRight':\n          game.moveRight();\n          break;\n\n        case 'ArrowUp':\n          game.moveUp();\n          break;\n\n        case 'ArrowDown':\n          game.moveDown();\n          break;\n\n        default:\n          return;\n      }\n\n      game.updateHtmlCells();\n      score();\n      loseOrWin();\n    }\n  });\n};\n\n/**\n * Updates the score display on the webpage.\n */\nconst score = () => {\n  const scoreCount = document.querySelector('.game-score');\n\n  scoreCount.textContent = game.getScore();\n};\n\n/**\n * Listens for keydown events and displays the appropriate win or lose message.\n */\nconst loseOrWin = () => {\n  const gameStatus = game.getStatus();\n\n  if (gameStatus === 'lose') {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  } else if (gameStatus === 'win') {\n    document.querySelector('.message-win').classList.remove('hidden');\n  }\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  startGame();\n  restartGame();\n  move();\n});\n","'use strict';\n\n/**\n * This class represents the game.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    initialScore = 0,\n  ) {\n    // Initial state of game\n    this.initialState = structuredClone(initialState);\n    this.state = structuredClone(initialState);\n\n    // Initial score\n    this.score = initialScore;\n\n    // Initial game status\n    this.status = 'idle';\n\n    // Value to win\n    this.WINNING_VALUE = 2048;\n  }\n\n  /**\n   * Moves all the tiles to the left and adds a random new tile.\n   */\n  moveLeft() {\n    let stateChanged = false;\n\n    this.state.forEach((row, i) => {\n      const initialRow = [...this.state[i]];\n\n      this.state[i] = this.shift(row, 'left');\n\n      if (!this.arraysEqual(initialRow, this.state[i])) {\n        stateChanged = true;\n      }\n    });\n\n    if (stateChanged) {\n      this.addRandomCell();\n    }\n  }\n\n  /**\n   * Moves all the tiles to the right and adds a random new tile.\n   */\n  moveRight() {\n    let stateChanged = false;\n\n    this.state.forEach((row, i) => {\n      const initialRow = [...this.state[i]];\n\n      this.state[i] = this.shift(row, 'right');\n\n      if (!this.arraysEqual(initialRow, this.state[i])) {\n        stateChanged = true;\n      }\n    });\n\n    if (stateChanged) {\n      this.addRandomCell();\n    }\n  }\n\n  /**\n   * Moves all the tiles upwards and adds a random new tile.\n   */\n  moveUp() {\n    const numColumns = this.state[0].length;\n    const numRows = this.state.length;\n\n    let stateChanged = false;\n\n    for (let col = 0; col < numColumns; col++) {\n      const initialColumn = this.state.map((row) => row[col]);\n      const column = this.state.map((row) => row[col]);\n      const newColumn = this.shift(column, 'up');\n\n      if (!this.arraysEqual(initialColumn, newColumn)) {\n        stateChanged = true;\n      }\n\n      for (let row = 0; row < numRows; row++) {\n        this.state[row][col] = newColumn[row];\n      }\n    }\n\n    if (stateChanged) {\n      this.addRandomCell();\n    }\n  }\n\n  /**\n   * Moves all the tiles downwards and adds a random new tile.\n   */\n  moveDown() {\n    const numColumns = this.state[0].length;\n    const numRows = this.state.length;\n\n    let stateChanged = false;\n\n    for (let col = 0; col < numColumns; col++) {\n      const initialColumn = this.state.map((row) => row[col]);\n      const column = this.state.map((row) => row[col]);\n      const newColumn = this.shift(column, 'down');\n\n      if (!this.arraysEqual(initialColumn, newColumn)) {\n        stateChanged = true;\n      }\n\n      for (let row = 0; row < numRows; row++) {\n        this.state[row][col] = newColumn[row];\n      }\n    }\n\n    if (stateChanged) {\n      this.addRandomCell();\n    }\n  }\n\n  /**\n   * Method for comparing two arrays (to check for state changes)\n   */\n  arraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns current game score\n   *\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * Returns current game state\n   *\n   * @returns {number[][]}\n   */\n  getState() {\n    return structuredClone(this.state);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game by adding two random tiles\n   * and setting the status to 'playing'.\n   */\n  start() {\n    this.addRandomCell();\n    this.addRandomCell();\n    this.getState();\n    this.status = 'playing';\n  }\n\n  /**\n   * Resets the game to its initial state.\n   */\n  restart() {\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  /**\n   * Adds a random tile (either 2 or 4) to an empty cell.\n   * This tile is placed in a random empty position on the board.\n   */\n  addRandomCell() {\n    const emptyCells = [];\n\n    // Find all empty cells on the board.\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 0; col < this.state[row].length; col++) {\n        if (this.state[row][col] === 0) {\n          emptyCells.push([row, col]);\n        }\n      }\n    }\n\n    // If there are no empty cells, return.\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    // Choose a random empty cell and place a 2 or 4.\n    const [rowRand, cellRand] =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.state[rowRand][cellRand] = Math.random() < 0.1 ? 4 : 2;\n\n    this.updateHtmlCells();\n  }\n\n  /**\n   * Gets the game cells from the DOM.\n   *\n   * @returns {number[][]} A 2D array of HTML cell elements.\n   */\n  getCells() {\n    if (!this.cachedCells) {\n      const rows = document.querySelectorAll('.field-row');\n\n      // Cache the cell elements if they haven't been cached yet.\n      this.cachedCells = Array.from(rows).map((row) => {\n        return Array.from(row.querySelectorAll('.field-cell'));\n      });\n    }\n\n    return this.cachedCells;\n  }\n\n  /**\n   * Update HTML according to the game state\n   */\n  updateHtmlCells() {\n    const htmlCells = this.getCells();\n    const state = this.getState();\n\n    state.forEach((row, i) => {\n      row.forEach((value, j) => {\n        const cell = htmlCells[i][j];\n\n        // Set the cell's text content and class name based on the value.\n        cell.textContent = value || '';\n\n        cell.className = cell.className\n          .split(' ')\n          .filter((className) => !className.startsWith('field-cell--'))\n          .join(' ');\n\n        if (value !== 0) {\n          cell.classList.add(`field-cell--${value}`);\n        }\n      });\n    });\n  }\n\n  /**\n   * Shifts the tiles in a given direction,\n   * merging adjacent tiles with equal values.\n   * Also updates the score.\n   *\n   * @param {number[]} array - The array of tiles to shift.\n   * @param {string} direction - The direction to shift the tiles\n   * ('left', 'right', 'up', 'down').\n   * @returns {number[]} The new array after shifting and merging.\n   */\n  shift(array, direction) {\n    const nonZero = array.filter((num) => num !== 0);\n    const newArray = [];\n    let scoreIncrement = 0;\n\n    // Loop through the non-zero tiles and merge if adjacent tiles are equal.\n    for (let i = 0; i < nonZero.length; i++) {\n      if (nonZero[i] === nonZero[i + 1]) {\n        const mergedValue = nonZero[i] * 2;\n\n        newArray.push(mergedValue);\n        scoreIncrement += mergedValue;\n        i++;\n      } else {\n        newArray.push(nonZero[i]);\n      }\n    }\n\n    // Fill the remaining spaces with zeros based on the direction of movement.\n    const zeros = new Array(array.length - newArray.length).fill(0);\n    const result =\n      direction === 'left' || direction === 'up'\n        ? newArray.concat(zeros)\n        : zeros.concat(newArray);\n\n    this.score += scoreIncrement;\n\n    // Check if the game is over or won after the move.\n    this.isGameOver();\n    this.isGameWin();\n\n    return result;\n  }\n\n  /**\n   * Checks if the game is over.\n   * Sets the game status to 'lose' if the game is over.\n   */\n  isGameOver() {\n    for (const row of this.state) {\n      if (row.includes(0)) {\n        return;\n      }\n    }\n\n    const numRows = this.state.length;\n    const numColumns = this.state[0].length;\n\n    for (let row = 0; row < numRows; row++) {\n      for (let col = 0; col < numColumns; col++) {\n        const current = this.state[row][col];\n\n        if (\n          (col < numColumns - 1 && current === this.state[row][col + 1]) ||\n          (row < numRows - 1 && current === this.state[row + 1][col])\n        ) {\n          return;\n        }\n      }\n    }\n\n    this.status = 'lose';\n  }\n\n  /**\n   * Checks if the player has won the game.\n   * Sets the game status to 'win' if the player has won.\n   */\n  isGameWin() {\n    const state = this.getState();\n\n    state.forEach((row) => {\n      if (row.includes(this.WINNING_VALUE)) {\n        this.status = 'win';\n      }\n    });\n  }\n\n  createTile(value, element) {\n    return {\n      value: value,\n      element: element,\n    };\n  }\n\n  setValue(tile, value) {\n    tile.value = value;\n    tile.element.textContent = value === 0 ? '' : value;\n\n    tile.element.className = tile.element.className\n      .split(' ')\n      .filter((className) => !className.startsWith('field-cell--'))\n      .join(' ');\n\n    if (value !== 0) {\n      tile.element.classList.add(`field-cell--${value}`);\n    }\n  }\n\n  setPosition(tile, x, y) {\n    tile.element.style.transition = 'transform 0.2s ease';\n    tile.element.style.transform = `translate(${x * 100}px, ${y * 100}px)`; // assuming each cell is 100px by 100px\n  }\n\n  animateTileAppear(tile) {\n    tile.element.classList.add('tile-appear');\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_with_holes } from \"./_array_with_holes.js\";\nimport { _ as _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _ as _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$d4f69c5c6c4654b1$export$71511d61b312f219","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","$227c6742e0ff6f82$export$71511d61b312f219","isArray","iter","Symbol","iterator","TypeError","$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","initialScore","instance","Constructor","structuredClone","state","score","status","WINNING_VALUE","key","value","_this","stateChanged","forEach","row","initialRow","shift","arraysEqual","addRandomCell","_loop","col","initialColumn","map","column","newColumn","numRows","numColumns","arr1","getState","JSON","parse","stringify","emptyCells","push","_emptyCells_Math_floor","Math","floor","random","_s","_e","_i","_arr","_n","_d","next","done","err","rowRand","cellRand","updateHtmlCells","cachedCells","rows","document","querySelectorAll","htmlCells","getCells","j","cell","textContent","className","split","filter","startsWith","join","classList","add","concat","array","direction","nonZero","num","newArray","scoreIncrement","mergedValue","zeros","fill","result","isGameOver","isGameWin","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","includes","return","row1","current","element","tile","x","y","style","transition","transform","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$startGame","startButton","querySelector","addEventListener","start","messageStart","restartButton","remove","$197cd56b15c33885$var$restartGame","restart","$197cd56b15c33885$var$score","messageLose","messageWin","$197cd56b15c33885$var$move","e","getStatus","moveLeft","moveRight","moveUp","moveDown","$197cd56b15c33885$var$loseOrWin","scoreCount","getScore","gameStatus"],"version":3,"file":"index.973d3e6c.js.map"}